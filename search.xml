<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker学习笔记</title>
      <link href="/blog/2020/07/21/docker/"/>
      <url>/blog/2020/07/21/docker/</url>
      
        <content type="html"><![CDATA[<p>这是在看完狂神的docker视频之后做的笔记~存档用</p><a id="more"></a><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><h3 id="Docekr为什么会出现"><a href="#Docekr为什么会出现" class="headerlink" title="Docekr为什么会出现"></a>Docekr为什么会出现</h3><p>一款产品有开发和生产两套环境，两套应用配置</p><p>开发和运维问题：这个项目在我的电脑上是可以运行的！版本更新迭代，不同版本环境的兼容，导致服务不可用</p><p>环境配置问题：环境配置是非常麻烦的，每个机器都要部署环境，费时费力</p><p>思考：项目是否可以带上环境一起安装打包？把原始环境一模一样地复制过来</p><p>在服务器上部署十分麻烦，不能跨平台</p><p>传统开发：开发人员做项目。运维人员做部署</p><p>现在：开发打包部署上线，一起做</p><h3 id="Docker能干什么？"><a href="#Docker能干什么？" class="headerlink" title="Docker能干什么？"></a>Docker能干什么？</h3><blockquote><p>之前的虚拟机技术，所有的项目都在同一个环境下运行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/57b9859b-3c21-4ea9-a19e-f27510e44f00.png" alt="image-20200702102945900"></p><p>虚拟机的缺点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.占用资源非常多</span><br><span class="line">2.冗余技术多</span><br><span class="line">3.启动很慢</span><br></pre></td></tr></table></figure><blockquote><p>容器化技术</p></blockquote><p><code>容器化技术不是一个完整的操作系统</code></p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/daafed3e-4939-492a-8d4f-3ccce9b05639.png" alt="image-2020070202"></p><p>比较docker和虚拟机技术的不同</p><ul><li>传统的虚拟机，虚拟出一套硬件后，在其上运行一个完整的操作系统，在该操作系统上安装和运行软件</li><li>容器内的应用直接运行在宿主机的内核，容器是没有自己的内核的，也没有进行硬件虚拟，更加轻便</li><li>每个容器间都是相互隔离的，每个容器都有自己的文件系统，互不影响，能区分计算资源</li></ul><blockquote><p>DevOps(开发，运维)</p></blockquote><p><strong>更快速的交付和部署</strong></p><p>传统：一堆帮助文档，安装程序</p><p>docker： 一键运行打包镜像发布测试</p><p><strong>更便捷的升级和扩缩容</strong></p><p>使用了Docker之后,我们部署应用就像搭积木一样!</p><p>项目打包为一个镜像,扩展,服务器A!服务器B</p><p><strong>更简单的系统运维</strong></p><p>在容器化之后，我们开发，测试环境是高度一致的</p><p><strong>更高效的计算机资源利用</strong></p><p>Docker是内核级别的虚拟化，可以在一个物理机上运行很多的容器实例，服务器性能可以被压榨到极致</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://oscimg.oschina.net/oscnet/6980be9f402ffabf9c044b8170630006086.png" alt="docker架构图"></p><p><strong>镜像(image)</strong></p><p>docker镜像好比一个模板，可以通过这个模板来创建容器服务nginx镜像=&gt; run =&gt; nginx01(提供服务器)</p><p>通过这个镜像可以创建多个容器(最终服务运行或者项目运行就是在容器中的)</p><p><strong>容器(container)</strong></p><p>docker利用容器技术，独立运行一个或一组应用，通过镜像来创建</p><p>容器和镜像关系类似于面向对象编程中的对象和类。</p><p>启动，停止，删除，基本命令</p><p><strong>仓库(repository)</strong></p><p>仓库就是存放镜像的地方</p><p>仓库分为共有仓库和私有仓库</p><p>Docker hub（默认国外镜像）阿里云 网易有国内镜像加速服务</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><h4 id="CentOS-Docker安装"><a href="#CentOS-Docker安装" class="headerlink" title="CentOS Docker安装"></a>CentOS Docker安装</h4><blockquote><p>环境准备</p></blockquote><ol><li>会一点Linux基础</li><li>CentOS7</li><li>使用XShell连接远程服务器</li></ol><blockquote><p>环境查看</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查看系统内核</span><br><span class="line"># uname -r</span><br><span class="line">3.10.0-1062.18.1.el7.x86_64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#系统版本</span><br><span class="line"># cat &#x2F;etc&#x2F;os-release</span><br><span class="line">NAME&#x3D;&quot;CentOS Linux&quot;</span><br><span class="line">VERSION&#x3D;&quot;7 (Core)&quot;</span><br><span class="line">ID&#x3D;&quot;centos&quot;</span><br><span class="line">ID_LIKE&#x3D;&quot;rhel fedora&quot;</span><br><span class="line">VERSION_ID&#x3D;&quot;7&quot;</span><br><span class="line">PRETTY_NAME&#x3D;&quot;CentOS Linux 7 (Core)&quot;</span><br><span class="line">ANSI_COLOR&#x3D;&quot;0;31&quot;</span><br><span class="line">CPE_NAME&#x3D;&quot;cpe:&#x2F;o:centos:centos:7&quot;</span><br><span class="line">HOME_URL&#x3D;&quot;https:&#x2F;&#x2F;www.centos.org&#x2F;&quot;</span><br><span class="line">BUG_REPORT_URL&#x3D;&quot;https:&#x2F;&#x2F;bugs.centos.org&#x2F;&quot;</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT&#x3D;&quot;CentOS-7&quot;</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION&#x3D;&quot;7&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT&#x3D;&quot;centos&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION&#x3D;&quot;7&quot;</span><br></pre></td></tr></table></figure><blockquote><p>安装Docker</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 一, 卸载旧的版本</span><br><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                 </span><br><span class="line"># 2, 需要安装的包</span><br><span class="line">yum install -y yum-utils \</span><br><span class="line">    device-mapper-persistent-data \</span><br><span class="line">    lvm2</span><br><span class="line"></span><br><span class="line">#3. 设置镜像仓库</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo #默认是国外的</span><br><span class="line"></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo #推荐使用</span><br><span class="line">#更新yum软件包索引</span><br><span class="line">yum makecache fast</span><br><span class="line">#安装docker    </span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io </span><br><span class="line">#启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line">#查看docker版本</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><blockquote><p>下载镜像</p><p>docker pull [要下载的镜像]</p></blockquote><blockquote><p>查看下载的镜像</p><p>docker images (docker image ls)</p></blockquote><p>卸载docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">rm -rf &#x2F;var&#x2F;lib&#x2F;docker #docker默认工作路径</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/acaa3fe3-2f51-4113-9c4e-6903de24a43a.png" alt="fetch镜像"  /><h4 id="Windows-Docker安装（win10）"><a href="#Windows-Docker安装（win10）" class="headerlink" title="Windows Docker安装（win10）"></a>Windows Docker安装（win10）</h4><p>下载官方docker-desktop安装程序</p><blockquote><p><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">https://www.docker.com/products/docker-desktop</a></p></blockquote><p>开启Hyper-V</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启搜索</span></span><br><span class="line">win + s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入</span></span><br><span class="line">启用或关闭windows功能</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/30d0b2ed-ecf1-4b3b-bdf2-74e83a814cdb.png" alt=""></p><p>选中Hyper-V</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/56dbc459-059c-4cf9-9891-d8c44eff802c.png" alt=""></p><h5 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h5><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://i.loli.net/2020/07/20/1QNDC4Ug2wVuIW8.png" alt="image-20200720114221052"></p><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p><strong>Docker是怎么工作的</strong></p><p>Docker是一个C/S结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问</p><p>DockerServer接收到Docker-Client的指令，就会执行这个命令</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/113cec07-74ca-48c5-9519-a5cf869396e3.png" alt="docker底层"></p><p>Docker为什么比VM快</p><ol><li>Docker有着比虚拟机更少的抽象层</li><li>Dcoker利用的是宿主机的内核，Vm需要的是Guest OS</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="http://hongyitong.github.io/img/docker.png" alt="docker与虚拟机"></p><p>新建一个容器的时候，Docker不需要像虚拟机一样重新安装一个操作系统内核，虚拟机是加载Guest OS，分钟级别的，而Docker是利用宿主机的操作系统，省略了这个复杂的过程</p><hr><h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version #docker版本</span><br><span class="line">docker info #显示docker的系统信息，包括镜像和容器数量</span><br><span class="line">docker [命令] --help #查看某个具体的命令</span><br></pre></td></tr></table></figure><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p><strong>docker images</strong> 查看下载的所有镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># docker images</span><br><span class="line">REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mysql                     5.6                 8de95e6026c3        20 hours ago        302MB</span><br><span class="line">redis                     latest              36304d3b4540        12 days ago         104MB</span><br><span class="line">mysql                     latest              30f937e841c8        2 weeks ago         541MB</span><br><span class="line">centos&#x2F;mysql-57-centos7   latest              f83a2938370c        8 months ago        452MB</span><br><span class="line"># 解释</span><br><span class="line">REPOSITORY 镜像的仓库名</span><br><span class="line">TAG 镜像的标签</span><br><span class="line">IMAGE ID 镜像ID</span><br><span class="line">CREATED 镜像创建时间</span><br><span class="line">SIZE 镜像的大小</span><br><span class="line"></span><br><span class="line">#可选项</span><br><span class="line">Options:</span><br><span class="line">  -a, --all             #列出所有镜像</span><br><span class="line">  -q, --quiet           #只显示镜像ID</span><br></pre></td></tr></table></figure><p><strong>docker  search</strong> 搜索镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br><span class="line">NAMEDESCRIPTIONSTARSOFFICIALAUTOMATED</span><br><span class="line">mysqlMySQL is a widely used, open-source relation…  9604     [OK]                </span><br><span class="line"></span><br><span class="line">#可选项,通过收藏来过滤</span><br><span class="line">--filter&#x3D;stars&#x3D;3000 #搜索出来的镜像收藏就是大于3000的</span><br></pre></td></tr></table></figure><p><strong>docker pull</strong> 拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx [:tag]</span><br><span class="line">Using default tag: latest #如果不写tag 默认使用最新版本</span><br><span class="line">latest: Pulling from library&#x2F;nginx</span><br><span class="line">8559a31e96f4: Pull complete  #分层下载,docker image核心 联合文件系统</span><br><span class="line">8d69e59170f7: Pull complete </span><br><span class="line">3f9f1ec1d262: Pull complete </span><br><span class="line">d1f5ff4f210d: Pull complete </span><br><span class="line">1e22bfa8652e: Pull complete </span><br><span class="line">Digest: sha256:21f32f6c08406306d822a0e6e8b7dc81f53f336570e852e25fbe1e3e3d0d0133 #签名</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io&#x2F;library&#x2F;nginx:latest #真实地址</span><br><span class="line"></span><br><span class="line"># docker pull nginx 等价于 dicker pull docker.io&#x2F;library&#x2F;nginx:latest</span><br></pre></td></tr></table></figure><p><strong>docker rmi</strong> 删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除指定的镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f 8de95e6026c3 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除全部的镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f $(docker images -ap)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清空临时镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi $(docker images -q -f dangling=<span class="literal">true</span>)</span></span><br></pre></td></tr></table></figure><p><strong>docker build</strong> 使用Dockerfile创建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用当前目录的Dockerfile创建镜像 当dockerfile的命名为Dockerfile就不需要制定文件名 -f</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t node:10.15-alpine .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -f /path/to/a/Dockerfile . <span class="comment"># /path/to/a</span></span></span><br></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p><strong>新建容器并启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run [options] image</span><br><span class="line"><span class="meta">#</span><span class="bash"> options</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若image本地没有则会去docker镜像库拉取</span></span><br><span class="line">--name=""  容器名字 用于区分容器</span><br><span class="line">-d         后台方式运行</span><br><span class="line">-it        使用交互方式运行,进入容器查看内容</span><br><span class="line">-p       指定容器的端口 -p 80:8080  主机端口:容器端口</span><br><span class="line">-P(大写)    随机指定端口</span><br></pre></td></tr></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker ps 命令 列出当前正在运行的容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> options</span></span><br><span class="line">-a # 列出当前正在运行的容器+历史运行过的容器</span><br><span class="line">-n=? # 显示最近创建的容器</span><br><span class="line">-q # 只显示容器的编号</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps </span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps -a </span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">919e58ff5521        redis               "docker-entrypoint.s…"   20 hours ago        Exited (0) 16 hours ago                       redis</span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit #直接容器停止并退出</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm 容器id</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rm -f $(docker ps -aq) <span class="comment">#删除所有的容器</span></span></span><br></pre></td></tr></table></figure><p><strong>启动和停止容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start 容器id or 容器name <span class="comment"># 启动一个或多个已经被停止的容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker restart 容器id or 容器name <span class="comment"># 重启容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stop 容器id or 容器name <span class="comment"># 停止运行中的容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">kill</span> 容器id or 容器name <span class="comment"># 杀掉运行中的容器</span></span></span><br></pre></td></tr></table></figure><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><p><strong>后台启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d 镜像名</span></span><br></pre></td></tr></table></figure><p><strong>查看容器中进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top 容器id</span></span><br></pre></td></tr></table></figure><p><strong>查看镜像元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect 容器id or 容器name</span></span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">我们通常容器都是使用后台方式运行的,需要进入容器,修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器后开启一个新的终端,可以在里面操作(常用) 退出shell不会导致容器停止运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it 容器id or name bashshell 默认命令行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器正在执行的终端,不会启动新的进程 如果退出shell，容器会停止运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker attach 容器id or 容器name</span></span><br></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp 容器id: 容器内路径 目的主机路径</span></span><br></pre></td></tr></table></figure><p><strong>docker system命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看docker磁盘占用情况</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker system df</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker system prune</span></span><br><span class="line">-a # 没有容器使用的docker容器都删除</span><br></pre></td></tr></table></figure><p><strong>手动清除Docker镜像/容器/数据卷</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除所有dangling镜像(即无tag的镜像)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi $(docker images | grep <span class="string">"^&lt;none&gt;"</span> | awk <span class="string">"&#123;print <span class="variable">$3</span>&#125;"</span>)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有 dangling 数据卷(即无用的 volume)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker volume rm $(docker volume ls -qf dangling=<span class="literal">true</span>)</span></span><br></pre></td></tr></table></figure><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像就是一个轻量级的，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码，运行时，库，环境变量和配置文件。</p><p><strong>如何得到镜像</strong></p><ul><li>从远处仓库下载</li><li>拷贝</li><li>自己制作一个镜像Dockerfile</li></ul><h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><blockquote><p>UnionFs(联合文件系统查询)</p></blockquote><p>我们下载的时候看到的一层一层就是这个</p><p>UnionFs(联合文件系统): Union文件系统(UnionFS)是一种分层,轻量级并且高性能的文件系统,它支持对文件系统的修改作为一次提交来一层层的叠加,同时可以将不同目录挂载到同一个虚拟文件系统下,Union文件系统是Docker镜像的基础,镜像可以通过分层来进行继承,基于基础镜像(没有父镜像),可以制作各种具体的应用镜像</p><p>特性: 一次同时加载多个文件系统,但从外面看起来,只能看到一个文件系统,联合加载会把各层文件系统叠加起来,这样最终的文件系统会包含所有底层的文件和目录结构</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成,这种层级的文件系统UnionFS</p><p>bootfs(boot file system)主要包含bootlloader和kernel,bootfs主要是引导加载kernel,Linux刚启动时会加载bootfs文件系统,在docker镜像的最底层是bootfs,这一层与我们典型的Linux/Unix系统是一样的,包含boot加载器和内核,当boot加载完成之后整个内核就在内存中了,此时内存的使用权已由bootfa转交给内核,此时系统也会卸载bootfs</p><p>rootfs(root file system),在bootfs之上,包含的就是典型Linux系统中的/dev, /proc,/bin, /etc等标准目录和文件,rootfs就是各种不同的操作系统发行版,比如Ubuntu, CentOS等等</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9XbElrc3Y1RVVKa2hrdUU3MEZSeGhZRllsSkVpYkl5bmFzOWUxU1BFMDBwNEtsR0RjTUdiN1hwOGliS2hKVXVmdFl1OXNwMmljWmgwSjBsbm11ZVhTWTZWQS82NDA?x-oss-process=image/format,png" alt="镜像分层"></p><h3 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h3><p>镜像下载的时候是一层一层的在下载</p><p>思考: 为什么Docker镜像要采用这种分层的结构呢?</p><p>最大好处,我觉得莫过于资源共享了!比如有多个镜像都从相同的Base镜像构建而来,那么宿主机</p><p>只需在磁盘上保留一份base镜像,同时内存中也只需要加载一份base镜像,这样就可以为所有的容器服务了,而且镜像的每一层都可以被共享</p><p>查看镜像分层的方式可以通过 <strong>docker image inspec</strong>t 命令!</p><h3 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker commit 提交容器成为一个新的镜像</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">命令和git原理类似</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker commit -m=<span class="string">"提交的描述信息"</span> -a=<span class="string">"作者"</span> 容器ID 目标镜像名:[tag]</span></span><br></pre></td></tr></table></figure><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h3 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h3><p><strong>docker的理念回顾</strong></p><p>将应用和环境都打包成一个镜像！</p><p>如果数据都在容器中，那么我们容器删除，数据就会丢失！<strong><mark> 需求: 数据可以持久化 </mark></strong></p><p>mysql，容器删了，数据丢失. <strong><mark> 需求：mysql数据可以存储到本地 </mark></strong></p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地</p><p>目录的挂载,将容器内的目录挂载到Linux上面</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/e0a70bc5-c46c-4ea7-8fa8-c2e6cbc8d367.png" alt="数据卷"></p><p><strong>总结一句话: 容器的持久化和同步操作! 容器间也可以数据共享的!</strong></p><h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><blockquote><p>方法一：直接使用命令来挂载 -v</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it -v 主机目录:容器内目录 -p 主机端口:容器端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动起来我们可以使用 docker inspect 容器id</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://static01.imgkr.com/temp/d5a266188ba1427596296c38e950f1fc.png" alt="容器信息"></p><h3 id="实战-安装MySQL"><a href="#实战-安装MySQL" class="headerlink" title="实战:安装MySQL"></a>实战:安装MySQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql:5.7</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行容器,需要做数据挂载! <span class="comment"># 安装启动mysql,需要配置密码,这是官方的</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 官方测试: docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=密码 -d mysql:tag</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启mysql</span></span><br><span class="line">-d  后台运行</span><br><span class="line">-p  端口映射</span><br><span class="line">-v  端口映射</span><br><span class="line">-e  环境配置</span><br><span class="line">--name 容器名</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 mysql:5.7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动成功之后，我们在本地使用navicat来测试连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash">navicat-连接到服务器的3310 --- 3310和容器内的3306映射，这个时候我们就可以连接上了</span></span><br></pre></td></tr></table></figure><p>假设我们将容器删除，挂载到本地 的数据卷依旧没有丢失，这就实现了容器数据持久化功能</p><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8080:80 --name nginx01 -v /etc/nginx nginx:alpine</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的volume情况</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker volume ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               b448950f96ca2daed2a90cd21e687431653dc9a2f40ccf51e0ce38432f6564a4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个就是匿名挂载，-v时只写了容器内路径，没有写</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 卷名:容器内路径</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/2db3ee8d-6086-4240-a011-d54f1853e1d3.png" alt="具名挂载"></p><p>所有的docker容器内的卷,没有指定目录的情况下都是在/var/lib/docker/volumes/卷名/_data</p><p>我们通过具名挂载可以方便的找到一个卷,大多数情况在使用的<code>具名挂载</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如何确定是具名挂载还是匿名挂载还是指定路径挂载</span></span><br><span class="line">-v 容器内路径 # 匿名挂载</span><br><span class="line">-v 卷名:容器内路径 # 具名挂载</span><br></pre></td></tr></table></figure><p>拓展：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通过 -v  容器内路径: ro rw 改变读写权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro <span class="built_in">read</span> only</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span> and write</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">一旦设置了容器权限,容器对挂载出来的内容就有限定了!</span></span><br><span class="line">docker -run -P -name nginx01 -v /etc/nginx:ro nginx</span><br><span class="line">docker -run -P -name nginx01 -v /etc/nginx:rw nginx</span><br><span class="line">ro : 只要看到ro就说明这个路径只能通过宿主机来改变,容器内部无法操作</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>dockerfile是用来构建docker镜像的文件，命令参数脚本！</p><p>构建步骤：</p><ol><li>编写一个dockerfile文件</li><li>docker build构建成为一个镜像</li><li>docker run镜像</li><li>docker push发布镜像（DockerHub，阿里云镜像仓库）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://wx2.sbimg.cn/2020/07/05/C4mZV.png" alt="docker官方镜像file"></p><p>很多官方镜像都是基础包，很多功能都是没有的，我们通常自己打剑自己的镜像</p><h3 id="Dockerfile的构建过程"><a href="#Dockerfile的构建过程" class="headerlink" title="Dockerfile的构建过程"></a>Dockerfile的构建过程</h3><p><strong>基础知识</strong>：</p><ol><li>每个保留关键字(指令)都必须是大写字母</li><li>执行从上到下顺序执行</li><li>#表示注释</li><li>每一条命令都会创建提交一个镜像层，并提交</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://i.loli.net/2020/07/20/B6Kh2SznJNAdG7P.png" alt="enter description here"></p><p>dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成为企业交付的标准，必须要掌握</p><p>步骤： 开发，部署，运维</p><p>Dockerfile：构建文件，定义了一切步骤，源代码</p><p>DockerImages：通过Dockerfile构建生成的镜像，最终发布和运行的产品</p><p>Docker容器：容器就是镜像运行起来提供服务器</p><h3 id="Dockerfile的指令"><a href="#Dockerfile的指令" class="headerlink" title="Dockerfile的指令"></a>Dockerfile的指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM       # 基础镜像, 一切从这里开始构建</span><br><span class="line">MANTAINER     # 镜像是谁写的, 姓名+邮箱</span><br><span class="line">RUN           # 镜像构建的时候需要运行的命令</span><br><span class="line">ADD           # 步骤, tomcat镜像,压缩包! 添加内容</span><br><span class="line">WORKDIR       # 镜像的工作目录</span><br><span class="line">VOLUME        # 挂载的目录</span><br><span class="line">EXPOSE        # 暴露端口配置</span><br><span class="line">CMD           # 指定这个容器启动的时候要运行的命令,只有最后一个会生效,可被替代</span><br><span class="line">ENTRYPOINT    # 指定这个容器启动的时候要运行的命令,可以追加命令</span><br><span class="line">ONBUILD       # 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD的指令,触发指令</span><br><span class="line">COPY      #类似ADD,将我们文件拷贝到镜像中</span><br><span class="line">ENV       # 构建的时候设置环境变量</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://wx1.sbimg.cn/2020/07/06/CXzSa.png" alt="dockerfile命令"></p><h3 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h3><p>Docker Hub 中99%镜像都是从centos基础镜像过来的,然后配置需要的软件</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://wx2.sbimg.cn/2020/07/06/CXWEK.png" alt=""></p><blockquote><p>创建一个自己的centos</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 编写dockerfile文件</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> jiawei&lt;jiaweilee95@<span class="number">126</span>.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$&#123;MYPATH&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim &amp;&amp; yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;MYPATH&#125;</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">"--end--"</span> &amp;&amp; /bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 通过这个文件构建镜像</span></span><br><span class="line">docker build -f &lt;dockerfile文件目录&gt; -t &lt;镜像名:[tag]&gt; .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 测试</span></span><br></pre></td></tr></table></figure><p>对比原生centos：</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://wx1.sbimg.cn/2020/07/06/CXvvw.png" alt=""></p><p>增加之后的镜像：</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/b3f9d89c-479b-4d4d-95b8-766d5531675c.png" alt=""></p><blockquote><p>CMD和ENTRYPOINT的区别</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD           # 指定这个容器启动的时候要运行的命令,只有最后一个会生效,可被替代</span><br><span class="line">ENTRYPOINT    # 指定这个容器启动的时候要运行的命令,可以追加命令</span><br></pre></td></tr></table></figure><p>测试CMD</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile-cmd-test</span></span><br><span class="line"></span><br><span class="line">FROM centos</span><br><span class="line">CMD ["ls", "-a"]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -f dockerfile-cmd-test -t centos .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> run 运行，发现ls -a生效</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run 963149b1ac5d</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 想要追加一个命令 -l  ls -al</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run 963149b1ac5d -l</span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused "exec: \"-l\": executable file not found in $PATH": unknown.</span><br><span class="line">ERRO[0000] error waiting for container: context canceled </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cmd的情况下 替换了CMD[<span class="string">"ls"</span>,<span class="string">"-a"</span>]命令,-不是命令追加</span></span><br></pre></td></tr></table></figure><p>ENTRYPOINT是往命令之后追加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile-cmd-test</span></span><br><span class="line"></span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT ["ls", "-a"]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -f dockerfile-cmd-test -t centos .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> run 运行，发现ls -a生效</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run 963149b1ac5d</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 想要追加一个命令 -l  ls -al</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run 963149b1ac5d -l</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里是生效的</span></span><br></pre></td></tr></table></figure><h3 id="实战：Tomcat镜像"><a href="#实战：Tomcat镜像" class="headerlink" title="实战：Tomcat镜像"></a>实战：Tomcat镜像</h3><ol><li>准备镜像文件 tomcat压缩包，jdk压缩包</li><li><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://img-blog.csdnimg.cn/20200619184436678.png#pic_center" alt=""></li><li>编写Dockerfile文件，官方命名<mark>Dockerfile</mark>，build会自动寻找这个文件，就不需要-f指定文件了</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER czp&lt;2432688105@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD apache-tomcat-9.0.33.tar.gz /usr/local/</span><br><span class="line"></span><br><span class="line">ADD jdk-8u221-linux-x64.rpm /usr/local/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"> </span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line"> </span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"> </span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_11</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.33</span><br><span class="line"></span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.33</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:/CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.33/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.33/bin/logs/catalina.out</span><br></pre></td></tr></table></figure><ol start="4"><li><p>构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker build -t diytomcat .</span></span><br></pre></td></tr></table></figure></li><li><p>本地测试</p><blockquote><p>curl localhost:9090</p></blockquote></li></ol><h3 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h3><blockquote><p>Dokcerhub</p></blockquote><ol><li><p>地址hub.docker.com 注册自己的账号!</p></li><li><p>确定这个账号可以登录</p></li><li><p>在服务器上提交自己的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker login --<span class="built_in">help</span></span></span><br><span class="line"></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br></pre></td></tr></table></figure></li><li><p>登录完毕就可以提交镜像了,就是一步 docker push</p></li></ol><blockquote><p>提交到阿里云镜像仓库</p></blockquote><ol><li><p>登录阿里云</p></li><li><p>找到容器镜像服务</p></li><li><p>创建命名空间</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/72823a13-7b12-4474-a3a0-ca63e867a1a3.png" alt=""></p></li><li><p>创建容器镜像</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/c92eedfe-799f-44f0-828a-b077fed9e2b2.png" alt=""></p></li><li><p>浏览阿里云</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://imgkr.cn-bj.ufileos.com/06a46121-5736-4977-b671-963bbd817e4b.png" alt=""></p></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://static.packt-cdn.com/products/9781787120532/graphics/B06157_10_04-1.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://blog.fntsr.tw/wp-content/uploads/2014/12/Docker-Command-Diagram.png" alt=""></p><h2 id="Docker网络原理"><a href="#Docker网络原理" class="headerlink" title="Docker网络原理"></a>Docker网络原理</h2><h3 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h3><p>清空所有环境</p><blockquote><p>测试</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://i.loli.net/2020/07/20/PHnrqkQRxTziwvt.png" alt="enter description here"></p><p>三个网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker是如何处理容器网络访问的？</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器内部网络地址 ip addr 发现容器启动的时候会得到一个eth0@if8 ip地址，docker分配的</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it tomcat01 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/sit 0.0.0.0 brd 0.0.0.0</span><br><span class="line">7: eth0@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta">#</span><span class="bash"> linux能ping通容器内部</span></span><br></pre></td></tr></table></figure><blockquote><p>原理</p></blockquote><ol><li><p>我们每启动一个docker容器，docker就会给docker容器分配一个ip，我们只要安装了docker，就会有一个网卡docker0</p><p>桥接模式，使用的是veth-pair技术</p><p>再次测试 ip addr</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://i.loli.net/2020/07/20/2esohKzy4MgYbXu.png" alt="enter description here"></p></li><li><p>再启动一个容器，发现又多了一对网卡</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://i.loli.net/2020/07/20/rFbTA9SH3LfIhDz.png" alt="enter description here"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们发现这个容器带来网卡, 都是一对对的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> veth-pair 就是一对虚拟机设备接口,他们都是成对出现的,一端连着协议,一端彼此相连</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正因为有这个特性,veth-pair 充当桥梁,连接各种虚拟网络设备的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> openStac,Docker容器之间的连接,OVS的连接,都是使用 veth-pair 技术</span></span><br></pre></td></tr></table></figure></li><li><p>测试tomcat01 和tomcat02是否能ping通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 结论：容器和容器之间是可以互相ping通的</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://i.loli.net/2020/07/20/RTQcMNI1js4gp8q.png" alt="enter description here"></p></li></ol><p>结论: <strong>tomcat01和tomcat02是共用的一个路由器,docker0</strong></p><p>所有的容器不指定网络的情况下,都是docker0路由的,docker会给我们的容器分配一个默认的可用IP</p><blockquote><p>小结</p></blockquote><p>Docker使用的是linux的桥接，宿主机是一个Docker容器的网桥 Docker0</p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://i.loli.net/2020/07/20/FjIyzRZqDNavBeb.png" alt="enter description here"></p><p>Docker中所有的网络接口都是虚拟的,虚拟的转发效率高（内网传递文件）</p><p><strong>只要容器删除,对应网桥的一对就没了</strong></p><h3 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h3><blockquote><p>思考一个场景，我们编写了一个微服务，database url = ip；项目不重启，数据库ip改变了，我们希望可以处理这个问题，可以通过名字来访问容器吗？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it tomcat02 ping tomcat01</span></span><br><span class="line">ping: tomcat01: Name or service not known</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过--link可以解决网络连接问题</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name tomcat03 --link tomcat02 tomcat</span></span><br><span class="line">6aedb0ba2e798b184f42f98e4a38ce2a54cb97d47b985d17065b064a7f73d404</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it tomcat03 ping tomcat02</span></span><br><span class="line">PING tomcat02 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.061 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.040 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=3 ttl=64 time=0.040 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=4 ttl=64 time=0.082 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=5 ttl=64 time=0.039 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat02 ping statistics ---</span><br><span class="line">5 packets transmitted, 5 received, 0% packet loss, time 134ms</span><br><span class="line">rtt min/avg/max/mdev = 0.039/0.052/0.082/0.018 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反向是否可以ping通吗</span></span><br><span class="line">[root@CZP ~]# docker exec -it tomcat02 ping tomcat03</span><br></pre></td></tr></table></figure><p>-link <strong>本质就是在hosts中添加映射</strong></p><p>我们现在玩Docker已经不建议使用–link了!</p><p>自定义网络,不使用docker0!</p><p>docker0问题: 它不支持容器名连接访问!</p><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><blockquote><p>查看所有的docker网络</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">86c70406cec4        bridge              bridge              local</span><br><span class="line">e2cd35c81ffb        host                host                local</span><br><span class="line">c6fe6b78ab62        none                null                local</span><br></pre></td></tr></table></figure><p><strong>网络模式</strong></p><p>bridge: 桥接模式 docker 搭桥（默认）</p><p>none： 不配置网络</p><p>host：和宿主机共享网络</p><p>container: 容器内网络连通（用得少，局限很大）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接启动的命令 --net brodge,默认docker0</span></span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker0的特点: 默认的,域名是不能访问的, --link可以打通连接</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --driver bridge</span></span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">87d0f163b3a0c857d281bf4e97675d03555486c530969d1cb04950f203133b55</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">86c70406cec4        bridge              bridge              local</span><br><span class="line">e2cd35c81ffb        host                host                local</span><br><span class="line">87d0f163b3a0        mynet               bridge              local</span><br><span class="line">c6fe6b78ab62        none                null                local</span><br></pre></td></tr></table></figure><p>自己的网络创建好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker network inspect mynet</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Name": "mynet",</span><br><span class="line">        "Id": "87d0f163b3a0c857d281bf4e97675d03555486c530969d1cb04950f203133b55",</span><br><span class="line">        "Created": "2020-07-08T01:56:39.0611734Z",</span><br><span class="line">        "Scope": "local",</span><br><span class="line">        "Driver": "bridge",</span><br><span class="line">        "EnableIPv6": false,</span><br><span class="line">        "IPAM": &#123;</span><br><span class="line">            "Driver": "default",</span><br><span class="line">            "Options": &#123;&#125;,</span><br><span class="line">            "Config": [</span><br><span class="line">                &#123;</span><br><span class="line">                    "Subnet": "192.168.0.0/16",</span><br><span class="line">                    "Gateway": "192.168.0.1"</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "Internal": false,</span><br><span class="line">        "Attachable": false,</span><br><span class="line">        "Ingress": false,</span><br><span class="line">        "ConfigFrom": &#123;</span><br><span class="line">            "Network": ""</span><br><span class="line">        &#125;,</span><br><span class="line">        "ConfigOnly": false,</span><br><span class="line">        "Containers": &#123;&#125;,</span><br><span class="line">        "Options": &#123;&#125;,</span><br><span class="line">        "Labels": &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name tomcat-net-01 --net mynet tomcat</span></span><br><span class="line">f8acd6bd8a21c27ca293d4c2d150448299192bd1f58b41d273d61d24cfe7d9a8</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name tomcat-net-02 --net mynet tomcat</span></span><br><span class="line">84b8b3a4a45c579eb479dfa036bc6e88f2c4ea5a0e8edd0c8f225bddebb2747c</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker network inspect mynet</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Name": "mynet",</span><br><span class="line">        "Id": "87d0f163b3a0c857d281bf4e97675d03555486c530969d1cb04950f203133b55",</span><br><span class="line">        "Created": "2020-07-08T01:56:39.0611734Z",</span><br><span class="line">        "Scope": "local",</span><br><span class="line">        "Driver": "bridge",</span><br><span class="line">        "EnableIPv6": false,</span><br><span class="line">        "IPAM": &#123;</span><br><span class="line">            "Driver": "default",</span><br><span class="line">            "Options": &#123;&#125;,</span><br><span class="line">            "Config": [</span><br><span class="line">                &#123;</span><br><span class="line">                    "Subnet": "192.168.0.0/16",</span><br><span class="line">                    "Gateway": "192.168.0.1"</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "Internal": false,</span><br><span class="line">        "Attachable": false,</span><br><span class="line">        "Ingress": false,</span><br><span class="line">        "ConfigFrom": &#123;</span><br><span class="line">            "Network": ""</span><br><span class="line">        &#125;,</span><br><span class="line">        "ConfigOnly": false,</span><br><span class="line">        "Containers": &#123;</span><br><span class="line">            "84b8b3a4a45c579eb479dfa036bc6e88f2c4ea5a0e8edd0c8f225bddebb2747c": &#123;</span><br><span class="line">                "Name": "tomcat-net-02",</span><br><span class="line">                "EndpointID": "889a15d10cf311193a18033af3a75eefa6a074291e84aab65e9d88f4b9889bf2",</span><br><span class="line">                "MacAddress": "02:42:c0:a8:00:03",</span><br><span class="line">                "IPv4Address": "192.168.0.3/16",</span><br><span class="line">                "IPv6Address": ""</span><br><span class="line">            &#125;,</span><br><span class="line">            "f8acd6bd8a21c27ca293d4c2d150448299192bd1f58b41d273d61d24cfe7d9a8": &#123;</span><br><span class="line">                "Name": "tomcat-net-01",</span><br><span class="line">                "EndpointID": "810c98a4ee532167410f1bc28acbc1d3aac11390e7c5a0c0864c20832bf06fb6",</span><br><span class="line">                "MacAddress": "02:42:c0:a8:00:02",</span><br><span class="line">                "IPv4Address": "192.168.0.2/16",</span><br><span class="line">                "IPv6Address": ""</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "Options": &#123;&#125;,</span><br><span class="line">        "Labels": &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次测试ping连接</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it tomcat-net-01 ping 192.168.0.3</span></span><br><span class="line">PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.056 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.156 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=3 ttl=64 time=0.086 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=4 ttl=64 time=0.037 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.0.3 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 162ms</span><br><span class="line">rtt min/avg/max/mdev = 0.037/0.083/0.156/0.046 ms</span><br><span class="line"><span class="meta">#</span><span class="bash"> 现在不使用--link也可以ping容器名字</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it tomcat-net-02 ping 192.168.0.2</span></span><br><span class="line">PING 192.168.0.2 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=1 ttl=64 time=0.039 ms</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=2 ttl=64 time=0.066 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.0.2 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 47ms</span><br><span class="line">rtt min/avg/max/mdev = 0.039/0.052/0.066/0.015 ms</span><br></pre></td></tr></table></figure><p>自定义网络docker都帮我们维护好了对应关系，推荐平时这样使用网络！</p><p>好处:</p><p>不同的集群使用不同的集群,保证集群之间是安全和健康的</p><h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://i.loli.net/2020/07/20/DKgzSZ2xc4LXoqY.png" alt="image-20200720164144037"></p><p><img src="https://cdn.jsdelivr.net/gh/Kaviilee/cdn@1.1/blog/images/loader/imageloading.svg" data-original="https://i.loli.net/2020/07/20/lrGh3epJAs1ntXx.png" alt="image-20200720164243586"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">测试打通 tomcat01到tomcat-net-01</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker network connect mynet tomcat01</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连通之后就是将 tomcat01 放到了mynet网络下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一个容器两个ip   阿里云: 公网ip 私网ip</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 01 连通ok</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it tomcat01 ping tomcat-net-01</span></span><br><span class="line">PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.087 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.065 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-net-01 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 71ms</span><br><span class="line">rtt min/avg/max/mdev = 0.065/0.076/0.087/0.011 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 02 依旧是连不通的</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it tomcat02 ping tomcat-net-01</span></span><br><span class="line">ping: tomcat-net-01: Name or service not known</span><br></pre></td></tr></table></figure><p>结论：要跨网络操作别人，就需要使用 <strong>docker network connect</strong> 连通</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取视口和文档高度</title>
      <link href="/blog/2019/09/07/js%E8%8E%B7%E5%8F%96%E8%A7%86%E5%8F%A3%E5%92%8C%E6%96%87%E6%A1%A3%E9%AB%98%E5%BA%A6/"/>
      <url>/blog/2019/09/07/js%E8%8E%B7%E5%8F%96%E8%A7%86%E5%8F%A3%E5%92%8C%E6%96%87%E6%A1%A3%E9%AB%98%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>js获取视口和文档高度</p><a id="more"></a><h4 id="js获取视口和文档高度"><a href="#js获取视口和文档高度" class="headerlink" title="js获取视口和文档高度"></a>js获取视口和文档高度</h4><table><thead><tr><th align="center">项目</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">clientHeight</td><td align="center">content area + padding</td></tr><tr><td align="center">offsetHeight</td><td align="center">border + content area + padding</td></tr><tr><td align="center">scrollHeight</td><td align="center">没有滚动条（内容展开时）的高度</td></tr></tbody></table><blockquote><p>body和html分别表示document.body和document.documentElement</p></blockquote><p>html.clientHeight 返回视口高度<br>html.offsetHeight 返回<html>元素的高度，在没有给<html>元素设置height时，可以理解为文档高度。<strong><em>ie6-8返回视口高度</em></strong><br>html.scrollHeight    总是返回文档高度。<strong><em>在firefox，opera，ie8中，返回文档高度和视口高度中较大的那个</em></strong><br>body.clientHeight和body.offsetHeight    返回<body>元素的高度（近似于文档高度），如果<body>设置height，则返回设定的值（ie6仍然返回<body>内元素的总高度）。<br>body.scrollHeight    总是返回文档高度。<strong><em>在webkit中，返回文档高度和视口高度中较大的那个。</em></strong></p><p>总之，获取视口高度用html.clientHeight,IE6-8还可以用html.offsetHeight。获取文档高度可以用html.scrollHeight或body.scrollHeight。</p><p>另外，​​现代浏览器中还有一个属性window.innerHeight可以用来获取视口高度，IE9+才开始支持。得到的高度有时候会多十几个像素，innerHeight把滚动条的高度也计算在内。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取视口高度</span></span><br><span class="line"><span class="keyword">let</span> viewportH = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文档高度</span></span><br><span class="line"><span class="keyword">let</span> docH = <span class="built_in">document</span>.body.scrollHeight;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> docH = <span class="built_in">document</span>.documentElement.scrollHeight</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
